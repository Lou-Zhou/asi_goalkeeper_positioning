"""Tests for the unxpass.labels module."""
import pytest
from socceraction.spadl.utils import add_names

from unxpass import labels as ls


@pytest.fixture
def actions(db):
    """Create the SPADL action representation for BEL v ITA at EURO2020."""
    game_id = 3795107
    # retrieve actions from database
    actions = add_names(db.actions(game_id)).reset_index()
    return actions


def test_get_labels(db):
    """It should return the labels for a given game."""
    df_labels = ls.get_labels(db, game_id=3795107)
    assert len(df_labels) > 0


def test_scores_xg(actions):
    """It should compute the xG value generated by the team possessing the ball."""
    df = ls.scores_xg(actions)
    assert len(df) == len(actions)
    assert "scores_xg" in df.columns
    assert df.at[60, "scores_xg"] == pytest.approx(0.033484, 1e-4)
    assert df.at[766, "scores_xg"] == 0


def test_concedes_xg(actions):
    """It should compute the xG value conceded by the team possessing the ball."""
    df = ls.concedes_xg(actions)
    assert len(df) == len(actions)
    assert "concedes_xg" in df.columns
    assert df.at[766, "concedes_xg"] == pytest.approx(0.0537, 1e-4)
    assert df.at[60, "concedes_xg"] == 0


def test_receiver(actions):
    """It should select the most likely receiver of passes in the freeeze frame."""
    df = ls.receiver(actions)
    assert len(df) == len(actions)
    assert "receiver" in df.columns

    # plot the action with the most likely receiver
    PLOT = False
    if PLOT:
        from matplotlib import pyplot as plt

        from unxpass.visualization import plot_action

        sample = (3795107, 4)
        action = actions[(actions.game_id == sample[0]) & (actions.action_id == sample[1])].iloc[0]
        receiver = df.at[sample[1], "receiver"]
        _, ax = plt.subplots(1)
        plot_action(action, ax=ax)
        pass_options = [
            (t["x"], t["y"])
            for t in action["freeze_frame_360"]
            if t["teammate"] and not t["actor"]
        ]
        ax.plot(
            pass_options[receiver][0],
            pass_options[receiver][1],
            marker="o",
            markersize=20,
            markeredgecolor="red",
            markerfacecolor=(1, 1, 0, 0.5),
        )
        plt.show()

    assert df.at[0, "receiver"] == 6
    assert df.at[1, "receiver"] is None
    assert df.at[2, "receiver"] == 2
